name: Rust

on:
  release:
    types:
      - created

jobs:
  build:

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]

    steps:
    - uses: actions/checkout@v1

    - name: Install Rust Unix
      if: runner.os != 'Windows'
      run: |
        if rustup --version >/dev/null 2>&1; then
            rustup update
        else
             curl https://sh.rustup.rs -sSf | sh -s -- -y --profile minimal --default-toolchain stable
             echo ::add-path::$HOME/.cargo/bin
        fi
    - name: Install Rust Windows
      if: runner.os == 'Windows'
      run: |
        if (Get-Command "rustup" -ErrorAction SilentlyContinue) {
            rustup update
        } else {
            Invoke-WebRequest https://static.rust-lang.org/rustup/dist/i686-pc-windows-gnu/rustup-init.exe -OutFile rustup-init.exe
            ./rustup-init.exe -y --profile minimal --default-toolchain stable
            echo ::add-path::%USERPROFILE%\.cargo\bin
        }

    - name: Rust version
      run: |
        cargo --version
        rustc --version

    - name: Build release
      env:
        JEANNE_ACCESS_CONSUMER_KEY: ${{ secrets.JEANNE_ACCESS_CONSUMER_KEY }}
        JEANNE_ACCESS_CONSUMER_SECRET: ${{ secrets.JEANNE_ACCESS_CONSUMER_SECRET }}
        JEANNE_TWITTER_CONSUMER_KEY: ${{ secrets.JEANNE_TWITTER_CONSUMER_KEY }}
        JEANNE_TWITTER_CONSUMER_SECRET: ${{ secrets.JEANNE_TWITTER_CONSUMER_SECRET }}
        JEANNE_DISCORD_TOKEN: ${{ secrets.JEANNE_DISCORD_TOKEN }}
      run: cargo build --release

    - name: Pack Unix
      if: runner.os != 'Windows'
      run: zip -j jeanne-${{runner.os}}.zip target/release/jeanne

    - name: Pack Windows
      if: runner.os == 'Windows'
      run: Compress-Archive -Path target/release/jeanne.exe -Destination jeanne-${{runner.os}}.zip

    - name: Upload to release Unix
      if: runner.os != 'Windows'
      run: |
        curl \
          -f \
          -sSL \
          -XPOST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Content-Type: application/zip" \
          --upload-file "jeanne-${{runner.os}}.zip" \
          "https://uploads.github.com/repos/$GITHUB_REPOSITORY/releases/$(jq --raw-output '.release.id' $GITHUB_EVENT_PATH)/assets?name=jeanne-${{runner.os}}.zip"

    - name: Upload to release Windows
      if: runner.os == 'Windows'
      run: |
        $headers = @{"Authorization"="token ${{ secrets.GITHUB_TOKEN }}" };
        $event = Get-Content -Raw -Path $env:GITHUB_EVENT_PATH | ConvertFrom-Json;
        $url = "https://uploads.github.com/repos/$($env:GITHUB_REPOSITORY)/releases/$($event.release.id)/assets?name=jeanne-${{runner.os}}.zip";
        Invoke-WebRequest -Headers $headers -Method POST -Infile jeanne-${{runner.os}}.zip -ContentType 'application/zip' -Uri $url
